// let x = 42
// x


// let x = 42
// let y = x + 1
// let z = y * 2
// z


// let classify x = 
//   if x > 0 then "positive"
//   else if x < 0 then "negative"
//   else "zero"
// let result = classify 42



// let const (a, b) = a
// const (1, 2)


// let even x = not x
// even true


// let b y = if y then 1 else 2
// b true

// let swap (x, y) = (y, x)
// let add_pairs (a, b) (c, d) = (a + c, b + d)
// let p1 = (1, 2)
// let p2 = swap p1
// let p3 = add_pairs p1 p2



// type shape = Circle of int | Rectangle of (int, int)
// let area shape = match shape with
//   | Circle r -> r * r * 3
//   | Rectangle (w, h) -> w * h
// let shapes = [Circle 5; Rectangle (3, 4)]
// let areas = List.map area shapes

// Circle 5



// type shape = Circle of int | Rectangle of (int, int)
// let validate_positive x = if x > 0 then x else 0
// let add_margin x = x + 2
// let make_safe_circle x = 
//   let validated = validate_positive x in
//   let with_margin = add_margin validated in
//   Circle with_margin
// make_safe_circle -3


// Config tuple: (api_key, max_retries, timeout_ms, debug_mode)
// let init_config = ("sk_123", 3, 5000, true)
// let validate_timeouts cfg =
//   let (key, retries, timeout, debug) = cfg in
//   let limit = if timeout < 1000 then 1000 else timeout in
//   (key, retries, limit, debug)
// let setup_connection cfg =
//   let (key, retries, timeout, debug) = cfg in
//   if debug then
//     ("DEBUG:" ^ key, retries, timeout, debug)
//   else
//     (key, retries, timeout, debug)
// let extract_retry_strategy cfg = 
//   let (_, retries, _, _) = cfg in
//   if retries > 5 then 5 else retries
// let validated_config = validate_timeouts init_config
// let final_config = setup_connection validated_config
// extract_retry_strategy final_config

