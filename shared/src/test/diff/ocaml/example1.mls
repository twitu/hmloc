let x = 42
let y = x + 1
let z = y * 2
z
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (int)
//│ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                    ^^^
//│   ◉ (int -> int -> int) comes from
//│   │  - lib. let (+): int -> int -> int
//│   │                  ^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (int -> _) comes from
//│      - l.2  let y = x + 1
//│                       ^
//│ ◉ (int) comes from
//│    - l.2  let y = x + 1
//│                   ^
//│    - l.1  let x = 42
//│                   ^^
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (int)
//│ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                             ^^^
//│   ◉ (int -> int) comes from
//│      - lib. let ( * ): int -> int -> int
//│                               ^^^^^^^^^^
//│     ◉ (int -> int -> int) comes from
//│     │  - lib. let ( * ): int -> int -> int
//│     │                    ^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?a) comes from
//│        - l.3  let z = y * 2
//│                         ^
//│   ◉ (?a) is assumed for
//│   │  - l.3  let z = y * 2
//│   │                 ^^^
//│   ▼ 
//│   ◉ (int -> _) comes from
//│      - l.3  let z = y * 2
//│                     ^^^
//│ ◉ (int) comes from
//│    - l.3  let z = y * 2
//│                       ^
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (int)
//│ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                           ^^^
//│   ◉ (int -> int) comes from
//│      - lib. let (+): int -> int -> int
//│                             ^^^^^^^^^^
//│     ◉ (int -> int -> int) comes from
//│     │  - lib. let (+): int -> int -> int
//│     │                  ^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.2  let y = x + 1
//│                         ^
//│   ◉ (?a) is assumed for
//│   │  - l.2  let y = x + 1
//│   │                 ^^^
//│   ▼ 
//│   ◉ (int -> _) comes from
//│      - l.2  let y = x + 1
//│                     ^^^
//│ ◉ (int) comes from
//│    - l.2  let y = x + 1
//│                       ^
//│ Type `int` flows into `anything`
//│ 
//│ (int) ~~~~ (?a) ---> (anything)
//│ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                                    ^^^
//│   ◉ (int -> int) comes from
//│      - lib. let ( * ): int -> int -> int
//│                               ^^^^^^^^^^
//│     ◉ (int -> int -> int) comes from
//│     │  - lib. let ( * ): int -> int -> int
//│     │                    ^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.3  let z = y * 2
//│                         ^
//│   ◉ (?b) is assumed for
//│   │  - l.3  let z = y * 2
//│   │                 ^^^
//│   ▼ 
//│   ◉ (int -> ?a) comes from
//│      - l.3  let z = y * 2
//│                     ^^^
//│ ◉ (?a) is assumed for
//│ │  - l.3  let z = y * 2
//│ │                 ^^^^^
//│ ▼ 
//│ ◉ (anything) comes from
//│    - l.4  z
//│           ^
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (?a) ~~~~ (int)
//│ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                      ^^^
//│   ◉ (int -> int -> int) comes from
//│   │  - lib. let ( * ): int -> int -> int
//│   │                    ^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a -> _) comes from
//│      - l.3  let z = y * 2
//│                       ^
//│ ◉ (?a) is assumed for
//│    - l.3  let z = y * 2
//│                   ^
//│    - l.2  let y = x + 1
//│                   ^^^^^
//│   ◉ (int -> ?a) comes from
//│   ▲  - l.2  let y = x + 1
//│   │                 ^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.2  let y = x + 1
//│                     ^^^
//│     ◉ (int -> ?b) comes from
//│     ▲  - l.2  let y = x + 1
//│     │                   ^
//│     │ 
//│     ◉ (int -> int -> int) comes from
//│        - lib. let (+): int -> int -> int
//│                        ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> int) comes from
//│      - lib. let (+): int -> int -> int
//│                             ^^^^^^^^^^
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                                  ^^^
//│ x: int
//│ y: int
//│ z: int
//│ res: 'a
//│   where
//│     'a = anything, int
//│ U max: 2, total: 17
//│ UERR 5 errors
//│ L: 2 [int ~ int, [int - (int -> (int -> int)) ~ ([α44'] -> α46') - α44', L: 0 [(int -> (int -> int)) ~ ([α44'] -> α46'), (int -> (int -> int)) <: ([α44'] -> α46')]], [α44' - ([int] -> α44') ~ (int -> int) - int, L: 1 [([int] -> α44') ~ (int -> int), ([int] -> α44') :> α45', [α45' - ([[int]] -> α45') ~ (int -> (int -> int)) - (int -> int), L: 0 [([[int]] -> α45') ~ (int -> (int -> int)), ([[int]] -> α45') :> (int -> (int -> int))]]]]]
//│ L: 2 [int ~ ⊤, [int - (int -> int) ~ ([int] -> α48) - α48, L: 1 [(int -> int) ~ ([int] -> α48), [(int -> int) - (int -> (int -> int)) ~ ([α50] -> α49) - α49, L: 0 [(int -> (int -> int)) ~ ([α50] -> α49), (int -> (int -> int)) <: ([α50] -> α49)]], α49 <: ([int] -> α48)]], α48 <: ⊤]
//│ L: 2 [int ~ int, [int - (int -> int) ~ ([int] -> α43') - int, L: 1 [(int -> int) ~ ([int] -> α43'), [(int -> int) - (int -> (int -> int)) ~ ([[int]] -> α42') - α42', L: 0 [(int -> (int -> int)) ~ ([[int]] -> α42'), (int -> (int -> int)) <: ([[int]] -> α42')]], α42' <: ([int] -> α43')]]]
//│ L: 2 [int ~ int, [int - (int -> int) ~ ([int] -> α47') - int, L: 1 [(int -> int) ~ ([int] -> α47'), [(int -> int) - (int -> (int -> int)) ~ ([α44'] -> α46') - α46', L: 0 [(int -> (int -> int)) ~ ([α44'] -> α46'), (int -> (int -> int)) <: ([α44'] -> α46')]], α46' <: ([int] -> α47')]]]
//│ L: 1 [int ~ int, [int - (int -> (int -> int)) ~ ([[int]] -> α42') - int, L: 0 [(int -> (int -> int)) ~ ([[int]] -> α42'), (int -> (int -> int)) <: ([[int]] -> α42')]]]

let classify x = 
  if x > 0 then "positive"
  else if x < 0 then "negative"
  else "zero"
let result = classify 42
//│ Type `bool` flows into `bool`
//│ 
//│ (bool) ~~~~ (?b) ---> (bool)
//│ 
//│ ◉ (bool) comes from
//│    - lib. let (<): 'a -> 'a -> bool
//│                                ^^^^
//│   ◉ (_ -> bool) comes from
//│      - lib. let (<): 'a -> 'a -> bool
//│                            ^^^^^^^^^^
//│     ◉ (_ -> _ -> bool) comes from
//│     │  - lib. let (<): 'a -> 'a -> bool
//│     │                  ^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?a) comes from
//│        - l.3    else if x < 0 then "negative"
//│                           ^
//│   ◉ (?a) is assumed for
//│   │  - l.3    else if x < 0 then "negative"
//│   │                   ^^^
//│   ▼ 
//│   ◉ (int -> ?b) comes from
//│      - l.3    else if x < 0 then "negative"
//│                       ^^^
//│ ◉ (?b) is assumed for
//│ │  - l.3    else if x < 0 then "negative"
//│ │                   ^^^^^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - l.3    else if x < 0 then "negative"
//│                     ^^^^^
//│ Type `bool` flows into `bool`
//│ 
//│ (bool) ~~~~ (?b) ---> (bool)
//│ 
//│ ◉ (bool) comes from
//│    - lib. let (>): 'a -> 'a -> bool
//│                                ^^^^
//│   ◉ (_ -> bool) comes from
//│      - lib. let (>): 'a -> 'a -> bool
//│                            ^^^^^^^^^^
//│     ◉ (_ -> _ -> bool) comes from
//│     │  - lib. let (>): 'a -> 'a -> bool
//│     │                  ^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?a) comes from
//│        - l.2    if x > 0 then "positive"
//│                      ^
//│   ◉ (?a) is assumed for
//│   │  - l.2    if x > 0 then "positive"
//│   │              ^^^
//│   ▼ 
//│   ◉ (int -> ?b) comes from
//│      - l.2    if x > 0 then "positive"
//│                  ^^^
//│ ◉ (?b) is assumed for
//│ │  - l.2    if x > 0 then "positive"
//│ │              ^^^^^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - l.2    if x > 0 then "positive"
//│                ^^^^^
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (?c) ~~~~ (?b) ~~~~ (int)
//│ 
//│ ◉ (int) comes from
//│    - l.2    if x > 0 then "positive"
//│                    ^
//│   ◉ (int -> _) comes from
//│   ▲  - l.2    if x > 0 then "positive"
//│   │              ^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│      - l.2    if x > 0 then "positive"
//│                  ^^^
//│     ◉ (?b -> ?a) comes from
//│     ▲  - l.2    if x > 0 then "positive"
//│     │                ^
//│     │ 
//│     ◉ (?c -> ?c -> bool) comes from
//│        - lib. let (>): 'a -> 'a -> bool
//│                        ^^^^^^^^^^^^^^^^
//│   ◉ (?c -> bool) comes from
//│      - lib. let (>): 'a -> 'a -> bool
//│                            ^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│   ◉ (?c -> ?c -> bool) comes from
//│   │  - lib. let (>): 'a -> 'a -> bool
//│   │                  ^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b -> ?a) comes from
//│      - l.2    if x > 0 then "positive"
//│                    ^
//│ ◉ (?b) is assumed for
//│    - l.2    if x > 0 then "positive"
//│                ^
//│    - l.1  let classify x = 
//│                        ^
//│   ◉ (?b -> _) comes from
//│   │  - l.1  let classify x = 
//│   │                      ^^^^
//│   │           if x > 0 then "positive" ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (int -> _) comes from
//│      - l.5  let result = classify 42
//│                          ^^^^^^^^
//│ ◉ (int) comes from
//│    - l.5  let result = classify 42
//│                                 ^^
//│ classify: int -> string
//│ result: string
//│ U max: 2, total: 27
//│ UERR 3 errors
//│ L: 2 [bool ~ bool, [bool - (α57' -> bool) ~ ([int] -> α59') - α59', L: 1 [(α57' -> bool) ~ ([int] -> α59'), [(α57' -> bool) - (α57' -> (α57' -> bool)) ~ ([α52'] -> α58') - α58', L: 0 [(α57' -> (α57' -> bool)) ~ ([α52'] -> α58'), (α57' -> (α57' -> bool)) <: ([α52'] -> α58')]], α58' <: ([int] -> α59')]], α59' <: bool]
//│ L: 2 [int ~ int, [int - ([int] -> α63') ~ (α62' -> bool) - α62', L: 1 [([int] -> α63') ~ (α62' -> bool), ([int] -> α63') :> α64', [α64' - ([α61'] -> α64') ~ (α62' -> (α62' -> bool)) - (α62' -> bool), L: 0 [([α61'] -> α64') ~ (α62' -> (α62' -> bool)), ([α61'] -> α64') :> (α62' -> (α62' -> bool))]]]], [α62' - (α62' -> (α62' -> bool)) ~ ([α61'] -> α64') - α61', L: 0 [(α62' -> (α62' -> bool)) ~ ([α61'] -> α64'), (α62' -> (α62' -> bool)) <: ([α61'] -> α64')]], [α61' - (α61' -> α65') ~ ([int] -> α66') - int, L: 0 [(α61' -> α65') ~ ([int] -> α66'), (α61' -> α65') <: ([int] -> α66')]]]
//│ L: 2 [bool ~ bool, [bool - (α53' -> bool) ~ ([int] -> α55') - α55', L: 1 [(α53' -> bool) ~ ([int] -> α55'), [(α53' -> bool) - (α53' -> (α53' -> bool)) ~ ([α52'] -> α54') - α54', L: 0 [(α53' -> (α53' -> bool)) ~ ([α52'] -> α54'), (α53' -> (α53' -> bool)) <: ([α52'] -> α54')]], α54' <: ([int] -> α55')]], α55' <: bool]


let const (a, b) = a
const (1, 2)
//│ Type `int` flows into `anything`
//│ 
//│ (int) ~~~~ (?a) ~~~~ (?b) ---> (anything)
//│ 
//│ ◉ (int) comes from
//│    - l.2  const (1, 2)
//│                  ^
//│   ◉ (int * int) comes from
//│      - l.2  const (1, 2)
//│                   ^^^^^^
//│     ◉ ((int * int) -> ?b) comes from
//│     ▲  - l.2  const (1, 2)
//│     │         ^^^^^
//│     │ 
//│     ◉ ((?a * _) -> ?a) comes from
//│        - l.1  let const (a, b) = a
//│                         ^^^^^^^^^^
//│   ◉ (?a * _) comes from
//│      - l.1  let const (a, b) = a
//│                       ^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.1  let const (a, b) = a
//│                      ^
//│   ◉ ((?a * _) -> ?a) comes from
//│   │  - l.1  let const (a, b) = a
//│   │                   ^^^^^^^^^^
//│   ▼ 
//│   ◉ ((int * int) -> ?b) comes from
//│      - l.2  const (1, 2)
//│             ^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.2  const (1, 2)
//│ │         ^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (anything) comes from
//│    - l.2  const (1, 2)
//│           ^^^^^^^^^^^^
//│ const: ('a, 'b,) -> 'a
//│ res: 'a
//│   where
//│     'a = anything, int
//│ U max: 3, total: 8
//│ UERR 1 errors
//│ L: 2 [int ~ ⊤, [int - ([[int]], [[int]],) ~ ([α69], [α70],) - α69, L: 1 [([[int]], [[int]],) ~ ([α69], [α70],), [([[int]], [[int]],) - (([[int]], [[int]],) -> α71) ~ (([α69], [α70],) -> [α69]) - ([α69], [α70],), L: 0 [(([[int]], [[int]],) -> α71) ~ (([α69], [α70],) -> [α69]), (([[int]], [[int]],) -> α71) :> (([α69], [α70],) -> [α69])]]]], [α69 - (([α69], [α70],) -> [α69]) ~ (([[int]], [[int]],) -> α71) - α71, L: 0 [(([α69], [α70],) -> [α69]) ~ (([[int]], [[int]],) -> α71), (([α69], [α70],) -> [α69]) <: (([[int]], [[int]],) -> α71)]], α71 <: ⊤]

:d
:dp
:unifyDbg
let even x = not x
even true
//│ Parsed: Def(false, even, Lam(Var(x), App(Var(not), Var(x))), true)
//│ App(Var(even), Var(true))
//│ 1. Typing term x => not x Lam even
//│ | 1. Typing pattern x Var 
//│ | 1. : α72' 
//│ | 1. Typing term not x App 
//│ | | 1. Typing term not Var 
//│ | | 1. : [(bool -> bool)] 
//│ | | 1. Typing term x Var 
//│ | | 1. : [α72'] 
//│ | | U Q [(bool -> bool)] ~ ([α72'] -> α73')
//│ | | U L: 0 [(bool -> bool) ~ ([α72'] -> α73'), (bool -> bool) <: ([α72'] -> α73')]
//│ | | U Q bool ~ [α72']
//│ | | U Q bool ~ α73'
//│ | | U L: 1 [bool ~ α72', [bool - (bool -> bool) ~ ([α72'] -> α73') - α72', L: 0 [(bool -> bool) ~ ([α72'] -> α73'), (bool -> bool) <: ([α72'] -> α73')]]]
//│ | | U L: 1 [bool ~ α73', [bool - (bool -> bool) ~ ([α72'] -> α73') - α73', L: 0 [(bool -> bool) ~ ([α72'] -> α73'), (bool -> bool) <: ([α72'] -> α73')]]]
//│ | 1. : α73' 
//│ 1. : (α72' -> α73') even
//│ ⬤ U Typed as: (α72' -> α73')
//│  where: 
//│ 0. Typing term even true App 
//│ | 0. Typing term even Var 
//│ | 0. : [(α74 -> α75)] 
//│ | 0. Typing term true Var 
//│ | 0. : [bool] 
//│ | U Q [(α74 -> α75)] ~ ([bool] -> α76)
//│ | U L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]
//│ | U Q α74 ~ [bool]
//│ | U Q α75 ~ α76
//│ | U L: 1 [α74 ~ bool, [α74 - (α74 -> α75) ~ ([bool] -> α76) - bool, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]]]
//│ | U Q bool ~ [bool]
//│ | U L: 1 [α75 ~ α76, [α75 - (α74 -> α75) ~ ([bool] -> α76) - α76, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]]]
//│ | U Q bool ~ α76
//│ | U L: 1 [bool ~ bool, [bool - (bool -> bool) ~ ([α74] -> α75) - α74, L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]], [α74 - (α74 -> α75) ~ ([bool] -> α76) - bool, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]]]
//│ | Serializing dataflow
//│ | UERR L: 1 [bool ~ bool, [bool - (bool -> bool) ~ ([α74] -> α75) - α74, L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]], [α74 - (α74 -> α75) ~ ([bool] -> α76) - bool, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]]]
//│ | tv : α74,  upperbound : List(), lowerbounds : List()
//│ | tv : α74,  upperbound : List(), lowerbounds : List()
//│ | U L: 1 [bool ~ α76, [bool - (bool -> bool) ~ ([α74] -> α75) - α75, L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]], [α75 - (α74 -> α75) ~ ([bool] -> α76) - α76, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]]]
//│ 0. : α76 
//│ U Q [α76] ~ ⊤
//│ U L: 0 [α76 ~ ⊤, α76 <: ⊤]
//│ U Q bool ~ ⊤
//│ U L: 1 [bool ~ ⊤, [bool - (bool -> bool) ~ ([α74] -> α75) - α75, L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]], [α75 - (α74 -> α75) ~ ([bool] -> α76) - α76, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]], α76 <: ⊤]
//│ reached here
//│ Serializing dataflow
//│ UERR L: 1 [bool ~ ⊤, [bool - (bool -> bool) ~ ([α74] -> α75) - α75, L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]], [α75 - (α74 -> α75) ~ ([bool] -> α76) - α76, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]], α76 <: ⊤]
//│ tv : α75,  upperbound : List(), lowerbounds : List()
//│ tv : α75,  upperbound : List(), lowerbounds : List()
//│ tv : α76,  upperbound : List(), lowerbounds : List()
//│ tv : α76,  upperbound : List(), lowerbounds : List()
//│ ⬤ U Typed as: α76
//│  where: 
//│ UERR REPORT L: 1 [bool ~ bool, [bool - (bool -> bool) ~ ([α74] -> α75) - α74, L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]], [α74 - (α74 -> α75) ~ ([bool] -> α76) - bool, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]]]
//│ UERR REPORT L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]
//│ UERR REPORT L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]
//│ Type `bool` flows into `bool`
//│ 
//│ (bool) ~~~~ (?a) ~~~~ (bool)
//│ 
//│ ◉ (bool) comes from
//│    - lib. let not: bool -> bool
//│                    ^^^^
//│   ◉ (bool -> bool) comes from
//│   │  - lib. let not: bool -> bool
//│   │                  ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a -> _) comes from
//│      - l.1  let even x = not x
//│                          ^^^
//│ ◉ (?a) is assumed for
//│    - l.1  let even x = not x
//│                            ^
//│    - l.1  let even x = not x
//│                    ^
//│   ◉ (?a -> _) comes from
//│   │  - l.1  let even x = not x
//│   │                  ^^^^^^^^^
//│   ▼ 
//│   ◉ (bool -> _) comes from
//│      - l.2  even true
//│             ^^^^
//│ ◉ (bool) comes from
//│    - l.2  even true
//│                ^^^^
//│ UERR REPORT L: 1 [bool ~ ⊤, [bool - (bool -> bool) ~ ([α74] -> α75) - α75, L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]], [α75 - (α74 -> α75) ~ ([bool] -> α76) - α76, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]], α76 <: ⊤]
//│ UERR REPORT L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]
//│ UERR REPORT L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]
//│ Type `bool` flows into `anything`
//│ 
//│ (bool) ~~~~ (?a) ~~~~ (?b) ---> (anything)
//│ 
//│ ◉ (bool) comes from
//│    - lib. let not: bool -> bool
//│                            ^^^^
//│   ◉ (bool -> bool) comes from
//│   │  - lib. let not: bool -> bool
//│   │                  ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let even x = not x
//│                          ^^^
//│ ◉ (?a) is assumed for
//│    - l.1  let even x = not x
//│                        ^^^^^
//│   ◉ (_ -> ?a) comes from
//│   │  - l.1  let even x = not x
//│   │                  ^^^^^^^^^
//│   ▼ 
//│   ◉ (bool -> ?b) comes from
//│      - l.2  even true
//│             ^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.2  even true
//│ │         ^^^^^^^^^
//│ ▼ 
//│ ◉ (anything) comes from
//│    - l.2  even true
//│           ^^^^^^^^^
//│ even: bool -> bool
//│ res: 'a
//│   where
//│     'a = anything, bool
//│ U max: 2, total: 10
//│ UERR 2 errors
//│ L: 1 [bool ~ bool, [bool - (bool -> bool) ~ ([α74] -> α75) - α74, L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]], [α74 - (α74 -> α75) ~ ([bool] -> α76) - bool, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]]]
//│ L: 1 [bool ~ ⊤, [bool - (bool -> bool) ~ ([α74] -> α75) - α75, L: 0 [(bool -> bool) ~ ([α74] -> α75), (bool -> bool) <: ([α74] -> α75)]], [α75 - (α74 -> α75) ~ ([bool] -> α76) - α76, L: 0 [(α74 -> α75) ~ ([bool] -> α76), (α74 -> α75) <: ([bool] -> α76)]], α76 <: ⊤]

:d
:dp
let b y = if y then 1 else 2
b true
//│ Parsed: Def(false, b, Lam(Var(y), If(Var(y), List(IfThen(Var(true), IntLit(1), IfThen(Var(false), IntLit(2)))), true)
//│ App(Var(b), Var(true))
//│ 1. Typing term y => if y(true) then 1 then (false) then 2 Lam b
//│ | 1. Typing pattern y Var 
//│ | 1. : α79' 
//│ | 1. Typing term if y(true) then 1 then (false) then 2 If 
//│ | | If(Var(y), List(IfThen(Var(true), IntLit(1), IfThen(Var(false), IntLit(2)))
//│ | | 1. Typing term y Var if-then-else condition
//│ | | 1. : [α79'] if-then-else condition
//│ | | U Q [α79'] ~ bool
//│ | | U L: 0 [α79' ~ bool, α79' <: bool]
//│ | | 1. Typing term 1 IntLit `then` branch
//│ | | 1. : [int] `then` branch
//│ | | U Q [int] ~ α80'
//│ | | U L: 0 [int ~ α80', int <: α80']
//│ | | 1. Typing term 2 IntLit `else` branch
//│ | | 1. : [int] `else` branch
//│ | 1. : α80' 
//│ 1. : (α79' -> α80') b
//│ ⬤ U Typed as: (α79' -> α80')
//│  where: 
//│ 0. Typing term b true App 
//│ | 0. Typing term b Var 
//│ | 0. : [(α81 -> α82)] 
//│ | 0. Typing term true Var 
//│ | 0. : [bool] 
//│ | U Q [(α81 -> α82)] ~ ([bool] -> α83)
//│ | U L: 0 [(α81 -> α82) ~ ([bool] -> α83), (α81 -> α82) <: ([bool] -> α83)]
//│ | U Q α81 ~ [bool]
//│ | U Q α82 ~ α83
//│ | U L: 1 [α81 ~ bool, [α81 - (α81 -> α82) ~ ([bool] -> α83) - bool, L: 0 [(α81 -> α82) ~ ([bool] -> α83), (α81 -> α82) <: ([bool] -> α83)]]]
//│ | U Q bool ~ [bool]
//│ | U L: 1 [α82 ~ α83, [α82 - (α81 -> α82) ~ ([bool] -> α83) - α83, L: 0 [(α81 -> α82) ~ ([bool] -> α83), (α81 -> α82) <: ([bool] -> α83)]]]
//│ | U Q [int] ~ α83
//│ | U L: 1 [bool ~ bool, bool :> α81, [α81 - (α81 -> α82) ~ ([bool] -> α83) - bool, L: 0 [(α81 -> α82) ~ ([bool] -> α83), (α81 -> α82) <: ([bool] -> α83)]]]
//│ | Serializing dataflow
//│ | UERR L: 1 [bool ~ bool, bool :> α81, [α81 - (α81 -> α82) ~ ([bool] -> α83) - bool, L: 0 [(α81 -> α82) ~ ([bool] -> α83), (α81 -> α82) <: ([bool] -> α83)]]]
//│ | tv : α81,  upperbound : List(), lowerbounds : List()
//│ | tv : α81,  upperbound : List(), lowerbounds : List()
//│ | U L: 1 [int ~ α83, int <: α82, [α82 - (α81 -> α82) ~ ([bool] -> α83) - α83, L: 0 [(α81 -> α82) ~ ([bool] -> α83), (α81 -> α82) <: ([bool] -> α83)]]]
//│ 0. : α83 
//│ U Q [α83] ~ ⊤
//│ U L: 0 [α83 ~ ⊤, α83 <: ⊤]
//│ U Q [int] ~ ⊤
//│ U L: 1 [int ~ ⊤, int <: α82, [α82 - (α81 -> α82) ~ ([bool] -> α83) - α83, L: 0 [(α81 -> α82) ~ ([bool] -> α83), (α81 -> α82) <: ([bool] -> α83)]], α83 <: ⊤]
//│ reached here
//│ Serializing dataflow
//│ UERR L: 1 [int ~ ⊤, int <: α82, [α82 - (α81 -> α82) ~ ([bool] -> α83) - α83, L: 0 [(α81 -> α82) ~ ([bool] -> α83), (α81 -> α82) <: ([bool] -> α83)]], α83 <: ⊤]
//│ tv : α82,  upperbound : List(), lowerbounds : List()
//│ tv : α82,  upperbound : List(), lowerbounds : List()
//│ tv : α83,  upperbound : List(), lowerbounds : List()
//│ tv : α83,  upperbound : List(), lowerbounds : List()
//│ ⬤ U Typed as: α83
//│  where: 
//│ Type `bool` flows into `bool`
//│ 
//│ (bool) <--- (?a) ~~~~ (bool)
//│ 
//│ ◉ (bool) comes from
//│ ▲  - l.1  let b y = if y then 1 else 2
//│ │                      ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.1  let b y = if y then 1 else 2
//│                 ^
//│   ◉ (?a -> _) comes from
//│   │  - l.1  let b y = if y then 1 else 2
//│   │               ^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (bool -> _) comes from
//│      - l.2  b true
//│             ^
//│ ◉ (bool) comes from
//│    - l.2  b true
//│             ^^^^
//│ Type `int` flows into `anything`
//│ 
//│ (int) ---> (?a) ~~~~ (?b) ---> (anything)
//│ 
//│ ◉ (int) comes from
//│ │  - l.1  let b y = if y then 1 else 2
//│ │                             ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.1  let b y = if y then 1 else 2
//│                     ^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│   │  - l.1  let b y = if y then 1 else 2
//│   │               ^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (bool -> ?b) comes from
//│      - l.2  b true
//│             ^
//│ ◉ (?b) is assumed for
//│ │  - l.2  b true
//│ │         ^^^^^^
//│ ▼ 
//│ ◉ (anything) comes from
//│    - l.2  b true
//│           ^^^^^^
//│ b: bool -> int
//│ res: 'a
//│   where
//│     'a = anything, int
//│ U max: 2, total: 9
//│ UERR 2 errors
//│ L: 1 [int ~ ⊤, int <: α82, [α82 - (α81 -> α82) ~ ([bool] -> α83) - α83, L: 0 [(α81 -> α82) ~ ([bool] -> α83), (α81 -> α82) <: ([bool] -> α83)]], α83 <: ⊤]
//│ L: 1 [bool ~ bool, bool :> α81, [α81 - (α81 -> α82) ~ ([bool] -> α83) - bool, L: 0 [(α81 -> α82) ~ ([bool] -> α83), (α81 -> α82) <: ([bool] -> α83)]]]

let swap (x, y) = (y, x)
let add_pairs (a, b) (c, d) = (a + c, b + d)
let p1 = (1, 2)
let p2 = swap p1
let p3 = add_pairs p1 p2
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (?a) ~~~~ (int)
//│ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                    ^^^
//│   ◉ (int -> int -> int) comes from
//│   │  - lib. let (+): int -> int -> int
//│   │                  ^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a -> _) comes from
//│      - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│                                              ^
//│ ◉ (?a) is assumed for
//│    - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│                                          ^
//│    - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│                          ^
//│   ◉ (?a * _) comes from
//│      - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│                           ^^^^^^
//│     ◉ ((?a * _) -> (_ * _) -> (_ * _)) comes from
//│     │  - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ ((int * int) -> _) comes from
//│        - l.5  let p3 = add_pairs p1 p2
//│                        ^^^^^^^^^
//│   ◉ (int * int) comes from
//│      - l.5  let p3 = add_pairs p1 p2
//│                                ^^
//│      - l.3  let p1 = (1, 2)
//│                      ^^^^^^
//│ ◉ (int) comes from
//│    - l.3  let p1 = (1, 2)
//│                     ^
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (?e) ~~~~ (?d) ~~~~ (int)
//│ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                           ^^^
//│   ◉ (int -> int) comes from
//│      - lib. let (+): int -> int -> int
//│                             ^^^^^^^^^^
//│     ◉ (int -> int -> int) comes from
//│     │  - lib. let (+): int -> int -> int
//│     │                  ^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?c) comes from
//│        - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│                                                ^
//│   ◉ (?c) is assumed for
//│   │  - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│   │                                        ^^^
//│   ▼ 
//│   ◉ (?e -> _) comes from
//│      - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│                                            ^^^
//│ ◉ (?e) is assumed for
//│    - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│                                              ^
//│    - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│                                 ^
//│   ◉ (?e * _) comes from
//│      - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│                                  ^^^^^^
//│     ◉ ((?e * _) -> (_ * _)) comes from
//│        - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│                                    ^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ ((_ * _) -> (?e * _) -> (_ * _)) comes from
//│       │  - l.2  let add_pairs (a, b) (c, d) = (a + c, b + d)
//│       │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ▼ 
//│       ◉ ((int * int) -> ?a) comes from
//│          - l.5  let p3 = add_pairs p1 p2
//│                          ^^^^^^^^^
//│     ◉ (?a) is assumed for
//│     │  - l.5  let p3 = add_pairs p1 p2
//│     │                  ^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b -> _) comes from
//│        - l.5  let p3 = add_pairs p1 p2
//│                        ^^^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│      - l.5  let p3 = add_pairs p1 p2
//│                                   ^^
//│      - l.4  let p2 = swap p1
//│                      ^^^^^^^
//│     ◉ ((int * int) -> ?b) comes from
//│     ▲  - l.4  let p2 = swap p1
//│     │                  ^^^^
//│     │ 
//│     ◉ ((_ * ?d) -> (?d * _)) comes from
//│        - l.1  let swap (x, y) = (y, x)
//│                        ^^^^^^^^^^^^^^^
//│   ◉ (?d * _) comes from
//│      - l.1  let swap (x, y) = (y, x)
//│                               ^^^^^^
//│ ◉ (?d) is assumed for
//│    - l.1  let swap (x, y) = (y, x)
//│                              ^
//│    - l.1  let swap (x, y) = (y, x)
//│                        ^
//│   ◉ (_ * ?d) comes from
//│      - l.1  let swap (x, y) = (y, x)
//│                      ^^^^^^
//│     ◉ ((_ * ?d) -> (?d * _)) comes from
//│     │  - l.1  let swap (x, y) = (y, x)
//│     │                  ^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ ((int * int) -> ?b) comes from
//│        - l.4  let p2 = swap p1
//│                        ^^^^
//│   ◉ (int * int) comes from
//│      - l.4  let p2 = swap p1
//│                           ^^
//│      - l.3  let p1 = (1, 2)
//│                      ^^^^^^
//│ ◉ (int) comes from
//│    - l.3  let p1 = (1, 2)
//│                        ^
//│ swap: ('a, 'b,) -> ('b, 'a,)
//│ add_pairs: (int, int,) -> (int, int,) -> (int, int,)
//│ p1: (int, int,)
//│ p2: (int, int,)
//│ p3: (int, int,)
//│ U max: 3, total: 35
//│ UERR 2 errors
//│ L: 3 [int ~ int, [int - (int -> int) ~ ([α103'] -> α104') - α103', L: 1 [(int -> int) ~ ([α103'] -> α104'), [(int -> int) - (int -> (int -> int)) ~ ([α101'] -> α102') - α102', L: 0 [(int -> (int -> int)) ~ ([α101'] -> α102'), (int -> (int -> int)) <: ([α101'] -> α102')]], α102' <: ([α103'] -> α104')]], [α103' - ([α103'], [α107'],) ~ ([[α111']], [[α112']],) - α111', L: 2 [([α103'], [α107'],) ~ ([[α111']], [[α112']],), [([α103'], [α107'],) - (([α103'], [α107'],) -> ([α104'], [α108'],)) ~ ([α110'] -> α113') - α110', L: 1 [(([α103'], [α107'],) -> ([α104'], [α108'],)) ~ ([α110'] -> α113'), [(([α103'], [α107'],) -> ([α104'], [α108'],)) - (([α101'], [α105'],) -> (([α103'], [α107'],) -> ([α104'], [α108'],))) ~ ([([[int]], [[int]],)] -> α109') - α109', L: 0 [(([α101'], [α105'],) -> (([α103'], [α107'],) -> ([α104'], [α108'],))) ~ ([([[int]], [[int]],)] -> α109'), (([α101'], [α105'],) -> (([α103'], [α107'],) -> ([α104'], [α108'],))) <: ([([[int]], [[int]],)] -> α109')]], α109' <: ([α110'] -> α113')]], [α110' - ([([[int]], [[int]],)] -> α110') ~ (([α112'], [α111'],) -> ([[α111']], [[α112']],)) - ([[α111']], [[α112']],), L: 0 [([([[int]], [[int]],)] -> α110') ~ (([α112'], [α111'],) -> ([[α111']], [[α112']],)), ([([[int]], [[int]],)] -> α110') :> (([α112'], [α111'],) -> ([[α111']], [[α112']],))]]]], [α111' - ([α112'], [α111'],) ~ ([[int]], [[int]],) - int, L: 1 [([α112'], [α111'],) ~ ([[int]], [[int]],), [([α112'], [α111'],) - (([α112'], [α111'],) -> ([[α111']], [[α112']],)) ~ ([([[int]], [[int]],)] -> α110') - ([[int]], [[int]],), L: 0 [(([α112'], [α111'],) -> ([[α111']], [[α112']],)) ~ ([([[int]], [[int]],)] -> α110'), (([α112'], [α111'],) -> ([[α111']], [[α112']],)) <: ([([[int]], [[int]],)] -> α110')]]]]]
//│ L: 2 [int ~ int, [int - (int -> (int -> int)) ~ ([α101'] -> α102') - α101', L: 0 [(int -> (int -> int)) ~ ([α101'] -> α102'), (int -> (int -> int)) <: ([α101'] -> α102')]], [α101' - ([α101'], [α105'],) ~ ([[int]], [[int]],) - int, L: 1 [([α101'], [α105'],) ~ ([[int]], [[int]],), [([α101'], [α105'],) - (([α101'], [α105'],) -> (([α103'], [α107'],) -> ([α104'], [α108'],))) ~ ([([[int]], [[int]],)] -> α109') - ([[int]], [[int]],), L: 0 [(([α101'], [α105'],) -> (([α103'], [α107'],) -> ([α104'], [α108'],))) ~ ([([[int]], [[int]],)] -> α109'), (([α101'], [α105'],) -> (([α103'], [α107'],) -> ([α104'], [α108'],))) <: ([([[int]], [[int]],)] -> α109')]]]]]


// type shape = Circle of int | Rectangle of (int, int)
// let area shape = match shape with
//   | Circle r -> r * r * 3
//   | Rectangle (w, h) -> w * h
// let shapes = [Circle 5; Rectangle (3, 4)]
// let areas = List.map area shapes

// Circle 5



type shape = Circle of int | Rectangle of (int, int)
let validate_positive x = if x > 0 then x else 0
let add_margin x = x + 2
let make_safe_circle x = 
  let validated = validate_positive x in
  let with_margin = add_margin validated in
  Circle with_margin
make_safe_circle -3
//│ Defined type alias shape
//│ Defined class Circle
//│ Defined class Rectangle
//│ Type `shape` flows into `anything`
//│ 
//│ (shape) ~~~~ (?b) ~~~~ (?a) ---> (anything)
//│ 
//│ ◉ (shape) comes from
//│    - l.1  type shape = Circle of int | Rectangle of (int, int)
//│                                        ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (int -> shape) comes from
//│   │  - l.1  type shape = Circle of int | Rectangle of (int, int)
//│   │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?b) comes from
//│      - l.7    Circle with_margin
//│               ^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.7    Circle with_margin
//│             ^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│   │  - l.4  let make_safe_circle x = 
//│   │                              ^^^^
//│   │           let validated = validate_positive x in ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?a) comes from
//│      - l.8  make_safe_circle -3
//│             ^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.8  make_safe_circle -3
//│ │         ^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (anything) comes from
//│    - l.8  make_safe_circle -3
//│           ^^^^^^^^^^^^^^^^^^^
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) <--- (int)
//│ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                    ^^^
//│   ◉ (int -> int -> int) comes from
//│   │  - lib. let (+): int -> int -> int
//│   │                  ^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a -> _) comes from
//│      - l.3  let add_margin x = x + 2
//│                                  ^
//│ ◉ (?a) is assumed for
//│    - l.3  let add_margin x = x + 2
//│                              ^
//│    - l.3  let add_margin x = x + 2
//│                          ^
//│   ◉ (?a -> _) comes from
//│   │  - l.3  let add_margin x = x + 2
//│   │                        ^^^^^^^^^
//│   ▼ 
//│   ◉ (?b -> _) comes from
//│      - l.6    let with_margin = add_margin validated in
//│                                 ^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.6    let with_margin = add_margin validated in
//│                                          ^^^^^^^^^
//│    - l.5    let validated = validate_positive x in
//│                             ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│   ▲  - l.5    let validated = validate_positive x in
//│   │                           ^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ -> ?c) comes from
//│      - l.2  let validate_positive x = if x > 0 then x else 0
//│                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.2  let validate_positive x = if x > 0 then x else 0
//│ │                                   ^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.2  let validate_positive x = if x > 0 then x else 0
//│                                                          ^
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (int)
//│ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                           ^^^
//│   ◉ (int -> int) comes from
//│      - lib. let (+): int -> int -> int
//│                             ^^^^^^^^^^
//│     ◉ (int -> int -> int) comes from
//│     │  - lib. let (+): int -> int -> int
//│     │                  ^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?a) comes from
//│        - l.3  let add_margin x = x + 2
//│                                    ^
//│   ◉ (?a) is assumed for
//│   │  - l.3  let add_margin x = x + 2
//│   │                            ^^^
//│   ▼ 
//│   ◉ (int -> _) comes from
//│      - l.3  let add_margin x = x + 2
//│                                ^^^
//│ ◉ (int) comes from
//│    - l.3  let add_margin x = x + 2
//│                                  ^
//│ Type `bool` flows into `bool`
//│ 
//│ (bool) ~~~~ (?b) ---> (bool)
//│ 
//│ ◉ (bool) comes from
//│    - lib. let (>): 'a -> 'a -> bool
//│                                ^^^^
//│   ◉ (_ -> bool) comes from
//│      - lib. let (>): 'a -> 'a -> bool
//│                            ^^^^^^^^^^
//│     ◉ (_ -> _ -> bool) comes from
//│     │  - lib. let (>): 'a -> 'a -> bool
//│     │                  ^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?a) comes from
//│        - l.2  let validate_positive x = if x > 0 then x else 0
//│                                              ^
//│   ◉ (?a) is assumed for
//│   │  - l.2  let validate_positive x = if x > 0 then x else 0
//│   │                                      ^^^
//│   ▼ 
//│   ◉ (int -> ?b) comes from
//│      - l.2  let validate_positive x = if x > 0 then x else 0
//│                                          ^^^
//│ ◉ (?b) is assumed for
//│ │  - l.2  let validate_positive x = if x > 0 then x else 0
//│ │                                      ^^^^^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - l.2  let validate_positive x = if x > 0 then x else 0
//│                                        ^^^^^
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (?b) ~~~~ (?c) ~~~~ (int)
//│ 
//│ ◉ (int) comes from
//│    - l.1  type shape = Circle of int | Rectangle of (int, int)
//│                                  ^^^
//│   ◉ (int -> shape) comes from
//│   │  - l.1  type shape = Circle of int | Rectangle of (int, int)
//│   │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b -> _) comes from
//│      - l.7    Circle with_margin
//│               ^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.7    Circle with_margin
//│                    ^^^^^^^^^^^
//│    - l.6    let with_margin = add_margin validated in
//│                               ^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│   ▲  - l.6    let with_margin = add_margin validated in
//│   │                             ^^^^^^^^^^
//│   │ 
//│   ◉ (_ -> ?c) comes from
//│      - l.3  let add_margin x = x + 2
//│                            ^^^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.3  let add_margin x = x + 2
//│                              ^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.3  let add_margin x = x + 2
//│   │                            ^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│      - l.3  let add_margin x = x + 2
//│                                ^^^
//│     ◉ (_ -> ?a) comes from
//│     ▲  - l.3  let add_margin x = x + 2
//│     │                              ^
//│     │ 
//│     ◉ (int -> int -> int) comes from
//│        - lib. let (+): int -> int -> int
//│                        ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> int) comes from
//│      - lib. let (+): int -> int -> int
//│                             ^^^^^^^^^^
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                                  ^^^
//│ Type `int` flows into `int`
//│ 
//│ (int) ~~~~ (?b) ~~~~ (?d) ~~~~ (?c) <--- (?e) ~~~~ (?f) ~~~~ (int)
//│ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                    ^^^
//│   ◉ (int -> int -> int) comes from
//│   │  - lib. let (+): int -> int -> int
//│   │                  ^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b -> _) comes from
//│      - l.3  let add_margin x = x + 2
//│                                  ^
//│ ◉ (?b) is assumed for
//│    - l.3  let add_margin x = x + 2
//│                              ^
//│    - l.3  let add_margin x = x + 2
//│                          ^
//│   ◉ (?b -> _) comes from
//│   │  - l.3  let add_margin x = x + 2
//│   │                        ^^^^^^^^^
//│   ▼ 
//│   ◉ (?d -> _) comes from
//│      - l.6    let with_margin = add_margin validated in
//│                                 ^^^^^^^^^^
//│ ◉ (?d) is assumed for
//│    - l.6    let with_margin = add_margin validated in
//│                                          ^^^^^^^^^
//│    - l.5    let validated = validate_positive x in
//│                             ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│   ▲  - l.5    let validated = validate_positive x in
//│   │                           ^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?e -> ?c) comes from
//│      - l.2  let validate_positive x = if x > 0 then x else 0
//│                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.2  let validate_positive x = if x > 0 then x else 0
//│ │                                   ^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2  let validate_positive x = if x > 0 then x else 0
//│ │                                                 ^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.2  let validate_positive x = if x > 0 then x else 0
//│                                 ^
//│   ◉ (?e -> ?a) comes from
//│   ▲  - l.2  let validate_positive x = if x > 0 then x else 0
//│   │                                        ^
//│   │ 
//│   ◉ (?f -> ?f -> bool) comes from
//│      - lib. let (>): 'a -> 'a -> bool
//│                      ^^^^^^^^^^^^^^^^
//│ ◉ (?f) is assumed for
//│   ◉ (?f -> bool) comes from
//│      - lib. let (>): 'a -> 'a -> bool
//│                            ^^^^^^^^^^
//│     ◉ (?f -> ?f -> bool) comes from
//│     │  - lib. let (>): 'a -> 'a -> bool
//│     │                  ^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?e -> ?a) comes from
//│        - l.2  let validate_positive x = if x > 0 then x else 0
//│                                              ^
//│   ◉ (?a) is assumed for
//│   │  - l.2  let validate_positive x = if x > 0 then x else 0
//│   │                                      ^^^
//│   ▼ 
//│   ◉ (int -> _) comes from
//│      - l.2  let validate_positive x = if x > 0 then x else 0
//│                                          ^^^
//│ ◉ (int) comes from
//│    - l.2  let validate_positive x = if x > 0 then x else 0
//│                                            ^
//│ Circle: int -> shape
//│ Rectangle: (int, int,) -> shape
//│ validate_positive: int -> int
//│ add_margin: int -> int
//│ make_safe_circle: int -> shape
//│ res: 'a
//│   where
//│     'a = anything, shape
//│ U max: 5, total: 49
//│ UERR 6 errors
//│ L: 1 [int ~ int, [int - (int -> (int -> int)) ~ ([α130''] -> α131'') - α130'', L: 0 [(int -> (int -> int)) ~ ([α130''] -> α131''), (int -> (int -> int)) <: ([α130''] -> α131'')]], [α130'' - (α130'' -> α132'') ~ ([α133''] -> α139'') - α133'', L: 0 [(α130'' -> α132'') ~ ([α133''] -> α139''), (α130'' -> α132'') <: ([α133''] -> α139'')]], [α133'' - ([α123'] -> α133'') ~ (α135'' -> α134'') - α134'', L: 0 [([α123'] -> α133'') ~ (α135'' -> α134''), ([α123'] -> α133'') :> (α135'' -> α134'')]], α134'' :> int]
//│ L: 2 [bool ~ bool, [bool - (α115' -> bool) ~ ([int] -> α117') - α117', L: 1 [(α115' -> bool) ~ ([int] -> α117'), [(α115' -> bool) - (α115' -> (α115' -> bool)) ~ ([α114'] -> α116') - α116', L: 0 [(α115' -> (α115' -> bool)) ~ ([α114'] -> α116'), (α115' -> (α115' -> bool)) <: ([α114'] -> α116')]], α116' <: ([int] -> α117')]], α117' <: bool]
//│ L: 2 [int ~ int, [int - (int -> shape) ~ ([α140'] -> α150') - α140', L: 0 [(int -> shape) ~ ([α140'] -> α150'), (int -> shape) <: ([α140'] -> α150')]], [α140' - ([α143'] -> α140') ~ (α142' -> α141') - α141', L: 0 [([α143'] -> α140') ~ (α142' -> α141'), ([α143'] -> α140') :> (α142' -> α141')]], [α141' - ([int] -> α141') ~ (int -> int) - int, L: 1 [([int] -> α141') ~ (int -> int), ([int] -> α141') :> α144', [α144' - ([α142'] -> α144') ~ (int -> (int -> int)) - (int -> int), L: 0 [([α142'] -> α144') ~ (int -> (int -> int)), ([α142'] -> α144') :> (int -> (int -> int))]]]]]
//│ L: 1 [shape ~ ⊤, [shape - (int -> shape) ~ ([α169] -> α168) - α168, L: 0 [(int -> shape) ~ ([α169] -> α168), (int -> shape) <: ([α169] -> α168)]], [α168 - (α151 -> α168) ~ ([int] -> α179) - α179, L: 0 [(α151 -> α168) ~ ([int] -> α179), (α151 -> α168) <: ([int] -> α179)]], α179 <: ⊤]
//│ L: 2 [int ~ int, [int - (int -> int) ~ ([int] -> α122') - int, L: 1 [(int -> int) ~ ([int] -> α122'), [(int -> int) - (int -> (int -> int)) ~ ([α120'] -> α121') - α121', L: 0 [(int -> (int -> int)) ~ ([α120'] -> α121'), (int -> (int -> int)) <: ([α120'] -> α121')]], α121' <: ([int] -> α122')]]]
//│ L: 2 [int ~ int, [int - (int -> (int -> int)) ~ ([α130''] -> α131'') - α130'', L: 0 [(int -> (int -> int)) ~ ([α130''] -> α131''), (int -> (int -> int)) <: ([α130''] -> α131'')]], [α130'' - (α130'' -> α132'') ~ ([α133''] -> α139'') - α133'', L: 0 [(α130'' -> α132'') ~ ([α133''] -> α139''), (α130'' -> α132'') <: ([α133''] -> α139'')]], [α133'' - ([α123'] -> α133'') ~ (α135'' -> α134'') - α134'', L: 0 [([α123'] -> α133'') ~ (α135'' -> α134''), ([α123'] -> α133'') :> (α135'' -> α134'')]], α134'' :> α135'', [α135'' - ([α135''] -> α138'') ~ (α136'' -> (α136'' -> bool)) - α136'', L: 0 [([α135''] -> α138'') ~ (α136'' -> (α136'' -> bool)), ([α135''] -> α138'') :> (α136'' -> (α136'' -> bool))]], [α136'' - (α136'' -> bool) ~ ([int] -> α137'') - int, L: 1 [(α136'' -> bool) ~ ([int] -> α137''), [(α136'' -> bool) - (α136'' -> (α136'' -> bool)) ~ ([α135''] -> α138'') - α138'', L: 0 [(α136'' -> (α136'' -> bool)) ~ ([α135''] -> α138''), (α136'' -> (α136'' -> bool)) <: ([α135''] -> α138'')]], α138'' <: ([int] -> α137'')]]]

// Config tuple: (api_key, max_retries, timeout_ms, debug_mode)
let init_config = ("sk_123", 3, 5000, true)
let validate_timeouts cfg =
  let (key, retries, timeout, debug) = cfg in
  let timeout = if timeout < 1000 then 1000 else timeout in
  (key, retries, timeout, debug)
let setup_connection cfg =
  let (key, retries, timeout, debug) = cfg in
  if debug then
    ("DEBUG:" ^ key, retries, timeout, debug)
  else
    (key, retries, timeout, debug)
let extract_retry_strategy cfg = 
  let (_, retries, _, _) = cfg in
  if retries > 5 then 5 else retries
let validated_config = validate_timeouts init_config
let final_config = setup_connection validated_config
let retry_count = extract_retry_strategy final_config
//│ Type `string` flows into `string`
//│ 
//│ (string) ~~~~ (string)
//│ 
//│ ◉ (string) comes from
//│    - lib. let (^): string -> string -> string
//│                    ^^^^^^
//│   ◉ (string -> string -> string) comes from
//│   │  - lib. let (^): string -> string -> string
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (string -> _) comes from
//│      - l.9      ("DEBUG:" ^ key, retries, timeout, debug)
//│                           ^
//│ ◉ (string) comes from
//│    - l.9      ("DEBUG:" ^ key, retries, timeout, debug)
//│                ^^^^^^^^
//│ Type `bool` flows into `bool`
//│ 
//│ (bool) ~~~~ (?b) ---> (bool)
//│ 
//│ ◉ (bool) comes from
//│    - lib. let (>): 'a -> 'a -> bool
//│                                ^^^^
//│   ◉ (_ -> bool) comes from
//│      - lib. let (>): 'a -> 'a -> bool
//│                            ^^^^^^^^^^
//│     ◉ (_ -> _ -> bool) comes from
//│     │  - lib. let (>): 'a -> 'a -> bool
//│     │                  ^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?a) comes from
//│        - l.14   if retries > 5 then 5 else retries
//│                            ^
//│   ◉ (?a) is assumed for
//│   │  - l.14   if retries > 5 then 5 else retries
//│   │              ^^^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?b) comes from
//│      - l.14   if retries > 5 then 5 else retries
//│                  ^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.14   if retries > 5 then 5 else retries
//│ │              ^^^^^^^^^^^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - l.14   if retries > 5 then 5 else retries
//│                ^^^^^^^^^^^
//│ Type `bool` flows into `bool`
//│ 
//│ (bool) ~~~~ (?b) ---> (bool)
//│ 
//│ ◉ (bool) comes from
//│    - lib. let (<): 'a -> 'a -> bool
//│                                ^^^^
//│   ◉ (_ -> bool) comes from
//│      - lib. let (<): 'a -> 'a -> bool
//│                            ^^^^^^^^^^
//│     ◉ (_ -> _ -> bool) comes from
//│     │  - lib. let (<): 'a -> 'a -> bool
//│     │                  ^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?a) comes from
//│        - l.4    let timeout = if timeout < 1000 then 1000 else timeout in
//│                                          ^
//│   ◉ (?a) is assumed for
//│   │  - l.4    let timeout = if timeout < 1000 then 1000 else timeout in
//│   │                            ^^^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?b) comes from
//│      - l.4    let timeout = if timeout < 1000 then 1000 else timeout in
//│                                ^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.4    let timeout = if timeout < 1000 then 1000 else timeout in
//│ │                            ^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - l.4    let timeout = if timeout < 1000 then 1000 else timeout in
//│                              ^^^^^^^^^^^^^^
//│ Type `bool` flows into `bool`
//│ 
//│ (bool) <--- (?c) ~~~~ (?f) ~~~~ (bool)
//│ 
//│ ◉ (bool) comes from
//│ ▲  - l.8    if debug then
//│ │              ^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│    - l.7    let (key, retries, timeout, debug) = cfg in
//│                                         ^^^^^
//│   ◉ (_ * _ * _ * ?c) comes from
//│   ▲  - l.7    let (key, retries, timeout, debug) = cfg in
//│   │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7    let (key, retries, timeout, debug) = cfg in
//│   │                                                ^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.6  let setup_connection cfg =
//│                                  ^^^
//│     ◉ (?d -> _) comes from
//│     │  - l.6  let setup_connection cfg =
//│     │                              ^^^^^
//│     │           let (key, retries, timeout, debug) = cfg in ...
//│     │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a -> _) comes from
//│        - l.16 let final_config = setup_connection validated_config
//│                                  ^^^^^^^^^^^^^^^^
//│   ◉ (?a) is assumed for
//│      - l.16 let final_config = setup_connection validated_config
//│                                                 ^^^^^^^^^^^^^^^^
//│      - l.15 let validated_config = validate_timeouts init_config
//│                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ ((string * int * int * bool) -> ?a) comes from
//│     ▲  - l.15 let validated_config = validate_timeouts init_config
//│     │                                ^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?e -> ?b) comes from
//│        - l.2  let validate_timeouts cfg =
//│                                     ^^^^^
//│                 let (key, retries, timeout, debug) = cfg in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   ▲  - l.3    let (key, retries, timeout, debug) = cfg in
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           let timeout = if timeout < 1000 then 1000 else timeout in ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ * _ * _ * ?f) comes from
//│      - l.5    (key, retries, timeout, debug)
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.5    (key, retries, timeout, debug)
//│                                     ^^^^^
//│    - l.3    let (key, retries, timeout, debug) = cfg in
//│                                         ^^^^^
//│   ◉ (_ * _ * _ * ?f) comes from
//│   ▲  - l.3    let (key, retries, timeout, debug) = cfg in
//│   │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3    let (key, retries, timeout, debug) = cfg in
//│   │                                                ^^^
//│   │ 
//│   ◉ (?e) is assumed for
//│      - l.2  let validate_timeouts cfg =
//│                                   ^^^
//│     ◉ (?e -> ?b) comes from
//│     │  - l.2  let validate_timeouts cfg =
//│     │                               ^^^^^
//│     │           let (key, retries, timeout, debug) = cfg in ...
//│     │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ ((string * int * int * bool) -> ?a) comes from
//│        - l.15 let validated_config = validate_timeouts init_config
//│                                      ^^^^^^^^^^^^^^^^^
//│   ◉ (string * int * int * bool) comes from
//│      - l.15 let validated_config = validate_timeouts init_config
//│                                                      ^^^^^^^^^^^
//│      - l.1  let init_config = ("sk_123", 3, 5000, true)
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (bool) comes from
//│    - l.1  let init_config = ("sk_123", 3, 5000, true)
//│                                                 ^^^^
//│ Type `string` flows into `string`
//│ 
//│ (string) ~~~~ (?d) ~~~~ (?f) ~~~~ (string)
//│ 
//│ ◉ (string) comes from
//│    - lib. let (^): string -> string -> string
//│                              ^^^^^^
//│   ◉ (string -> string) comes from
//│      - lib. let (^): string -> string -> string
//│                                ^^^^^^^^^^^^^^^^
//│     ◉ (string -> string -> string) comes from
//│     │  - lib. let (^): string -> string -> string
//│     │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?e) comes from
//│        - l.9      ("DEBUG:" ^ key, retries, timeout, debug)
//│                             ^
//│   ◉ (?e) is assumed for
//│   │  - l.9      ("DEBUG:" ^ key, retries, timeout, debug)
//│   │              ^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d -> _) comes from
//│      - l.9      ("DEBUG:" ^ key, retries, timeout, debug)
//│                  ^^^^^^^^^^
//│ ◉ (?d) is assumed for
//│    - l.9      ("DEBUG:" ^ key, retries, timeout, debug)
//│                           ^^^
//│    - l.7    let (key, retries, timeout, debug) = cfg in
//│                  ^^^
//│   ◉ (?d * _ * _ * _) comes from
//│   ▲  - l.7    let (key, retries, timeout, debug) = cfg in
//│   │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7    let (key, retries, timeout, debug) = cfg in
//│   │                                                ^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│      - l.6  let setup_connection cfg =
//│                                  ^^^
//│     ◉ (?g -> _) comes from
//│     │  - l.6  let setup_connection cfg =
//│     │                              ^^^^^
//│     │           let (key, retries, timeout, debug) = cfg in ...
//│     │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?a -> _) comes from
//│        - l.16 let final_config = setup_connection validated_config
//│                                  ^^^^^^^^^^^^^^^^
//│   ◉ (?a) is assumed for
//│      - l.16 let final_config = setup_connection validated_config
//│                                                 ^^^^^^^^^^^^^^^^
//│      - l.15 let validated_config = validate_timeouts init_config
//│                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ ((string * int * int * bool) -> ?a) comes from
//│     ▲  - l.15 let validated_config = validate_timeouts init_config
//│     │                                ^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?c -> ?b) comes from
//│        - l.2  let validate_timeouts cfg =
//│                                     ^^^^^
//│                 let (key, retries, timeout, debug) = cfg in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   ▲  - l.3    let (key, retries, timeout, debug) = cfg in
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           let timeout = if timeout < 1000 then 1000 else timeout in ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _ * _ * _) comes from
//│      - l.5    (key, retries, timeout, debug)
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.5    (key, retries, timeout, debug)
//│              ^^^
//│    - l.3    let (key, retries, timeout, debug) = cfg in
//│                  ^^^
//│   ◉ (?f * _ * _ * _) comes from
//│   ▲  - l.3    let (key, retries, timeout, debug) = cfg in
//│   │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3    let (key, retries, timeout, debug) = cfg in
//│   │                                                ^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│      - l.2  let validate_timeouts cfg =
//│                                   ^^^
//│     ◉ (?c -> ?b) comes from
//│     │  - l.2  let validate_timeouts cfg =
//│     │                               ^^^^^
//│     │           let (key, retries, timeout, debug) = cfg in ...
//│     │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ ((string * int * int * bool) -> ?a) comes from
//│        - l.15 let validated_config = validate_timeouts init_config
//│                                      ^^^^^^^^^^^^^^^^^
//│   ◉ (string * int * int * bool) comes from
//│      - l.15 let validated_config = validate_timeouts init_config
//│                                                      ^^^^^^^^^^^
//│      - l.1  let init_config = ("sk_123", 3, 5000, true)
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (string) comes from
//│    - l.1  let init_config = ("sk_123", 3, 5000, true)
//│                              ^^^^^^^^
//│ init_config: (string, int, int, bool,)
//│ validate_timeouts: ('a, 'b, int, 'c,) -> ('a, 'b, int, 'c,)
//│ setup_connection: (string, 'a, 'b, bool,) -> (string, 'a, 'b, bool,)
//│ extract_retry_strategy: ('a, int, 'b, 'c,) -> int
//│ validated_config: (string, int, int, bool,)
//│ final_config: (string, 'a, 'b, bool,)
//│ retry_count: int
//│ U max: 9, total: 119
//│ UERR 5 errors
//│ L: 2 [bool ~ bool, [bool - (α186'' -> bool) ~ ([int] -> α188'') - α188'', L: 1 [(α186'' -> bool) ~ ([int] -> α188''), [(α186'' -> bool) - (α186'' -> (α186'' -> bool)) ~ ([[α184']] -> α187'') - α187'', L: 0 [(α186'' -> (α186'' -> bool)) ~ ([[α184']] -> α187''), (α186'' -> (α186'' -> bool)) <: ([[α184']] -> α187'')]], α187'' <: ([int] -> α188'')]], α188'' <: bool]
//│ L: 2 [bool ~ bool, bool :> α229', [α229' - ([α224'], [α227'], [α228'], [α229'],) ~ ([[[α233']]], [[[α234']]], [[α239']], [[[α236']]],) - α236', L: 1 [([α224'], [α227'], [α228'], [α229'],) ~ ([[[α233']]], [[[α234']]], [[α239']], [[[α236']]],), ([α224'], [α227'], [α228'], [α229'],) :> α223', [α223' - (α223' -> α231') ~ ([α232'] -> α243') - α232', L: 0 [(α223' -> α231') ~ ([α232'] -> α243'), (α223' -> α231') <: ([α232'] -> α243')]], [α232' - ([([[string]], [[int]], [[int]], [[bool]],)] -> α232') ~ (α237' -> α238') - α238', L: 0 [([([[string]], [[int]], [[int]], [[bool]],)] -> α232') ~ (α237' -> α238'), ([([[string]], [[int]], [[int]], [[bool]],)] -> α232') :> (α237' -> α238')]], α238' :> ([[[α233']]], [[[α234']]], [[α239']], [[[α236']]],)]], [α236' - ([α233'], [α234'], [α235'], [α236'],) ~ ([[string]], [[int]], [[int]], [[bool]],) - bool, L: 1 [([α233'], [α234'], [α235'], [α236'],) ~ ([[string]], [[int]], [[int]], [[bool]],), ([α233'], [α234'], [α235'], [α236'],) :> α237', [α237' - (α237' -> α238') ~ ([([[string]], [[int]], [[int]], [[bool]],)] -> α232') - ([[string]], [[int]], [[int]], [[bool]],), L: 0 [(α237' -> α238') ~ ([([[string]], [[int]], [[int]], [[bool]],)] -> α232'), (α237' -> α238') <: ([([[string]], [[int]], [[int]], [[bool]],)] -> α232')]]]]]
//│ L: 2 [string ~ string, [string - (string -> string) ~ ([[α224']] -> α225') - α224', L: 1 [(string -> string) ~ ([[α224']] -> α225'), [(string -> string) - (string -> (string -> string)) ~ ([string] -> α226') - α226', L: 0 [(string -> (string -> string)) ~ ([string] -> α226'), (string -> (string -> string)) <: ([string] -> α226')]], α226' <: ([[α224']] -> α225')]], [α224' - ([α224'], [α227'], [α228'], [α229'],) ~ ([[[α233']]], [[[α234']]], [[α239']], [[[α236']]],) - α233', L: 1 [([α224'], [α227'], [α228'], [α229'],) ~ ([[[α233']]], [[[α234']]], [[α239']], [[[α236']]],), ([α224'], [α227'], [α228'], [α229'],) :> α223', [α223' - (α223' -> α231') ~ ([α232'] -> α243') - α232', L: 0 [(α223' -> α231') ~ ([α232'] -> α243'), (α223' -> α231') <: ([α232'] -> α243')]], [α232' - ([([[string]], [[int]], [[int]], [[bool]],)] -> α232') ~ (α237' -> α238') - α238', L: 0 [([([[string]], [[int]], [[int]], [[bool]],)] -> α232') ~ (α237' -> α238'), ([([[string]], [[int]], [[int]], [[bool]],)] -> α232') :> (α237' -> α238')]], α238' :> ([[[α233']]], [[[α234']]], [[α239']], [[[α236']]],)]], [α233' - ([α233'], [α234'], [α235'], [α236'],) ~ ([[string]], [[int]], [[int]], [[bool]],) - string, L: 1 [([α233'], [α234'], [α235'], [α236'],) ~ ([[string]], [[int]], [[int]], [[bool]],), ([α233'], [α234'], [α235'], [α236'],) :> α237', [α237' - (α237' -> α238') ~ ([([[string]], [[int]], [[int]], [[bool]],)] -> α232') - ([[string]], [[int]], [[int]], [[bool]],), L: 0 [(α237' -> α238') ~ ([([[string]], [[int]], [[int]], [[bool]],)] -> α232'), (α237' -> α238') <: ([([[string]], [[int]], [[int]], [[bool]],)] -> α232')]]]]]
//│ L: 1 [string ~ string, [string - (string -> (string -> string)) ~ ([string] -> α198') - string, L: 0 [(string -> (string -> string)) ~ ([string] -> α198'), (string -> (string -> string)) <: ([string] -> α198')]]]
//│ L: 2 [bool ~ bool, [bool - (α207' -> bool) ~ ([int] -> α209') - α209', L: 1 [(α207' -> bool) ~ ([int] -> α209'), [(α207' -> bool) - (α207' -> (α207' -> bool)) ~ ([[α204']] -> α208') - α208', L: 0 [(α207' -> (α207' -> bool)) ~ ([[α204']] -> α208'), (α207' -> (α207' -> bool)) <: ([[α204']] -> α208')]], α208' <: ([int] -> α209')]], α209' <: bool]
